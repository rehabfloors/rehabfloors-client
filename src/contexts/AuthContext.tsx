import { createContext, useState, useContext, ReactNode } from 'react';

interface User {
  id: string;
  name: string;
  email: string;
  role: 'therapist' | 'admin';
  institution: string;
}

interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  login: (email: string, password: string) => Promise<void>;
  signup: (name: string, email: string, password: string, institution: string) => Promise<void>;
  logout: () => void;
}

const defaultTherapist: User = {
  id: '1',
  name: 'Dr. Jessica Chen',
  email: 'jessica.chen@rehabfloor.com',
  role: 'therapist',
  institution: 'City Rehabilitation Center'
};

const AuthContext = createContext<AuthContextType | null>(null);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [user, setUser] = useState<User | null>(defaultTherapist);
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(true); // Set to true for demo

  const login = async (email: string, password: string) => {
    // In a real app, this would make an API call to authenticate
    // For demo purposes, we'll simulate successful authentication
    setUser(defaultTherapist);
    setIsAuthenticated(true);
  };

  const signup = async (name: string, email: string, password: string, institution: string) => {
    // In a real app, this would make an API call to register a new user
    // For demo purposes, we'll simulate successful registration
    setUser({
      id: '2', // This would normally be generated by the server
      name,
      email,
      role: 'therapist',
      institution
    });
    setIsAuthenticated(true);
  };

  const logout = () => {
    setUser(null);
    setIsAuthenticated(false);
  };

  return (
    <AuthContext.Provider value={{ user, isAuthenticated, login, signup, logout }}>
      {children}
    </AuthContext.Provider>
  );
};